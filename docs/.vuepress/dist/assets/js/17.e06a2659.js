(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{213:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#挂载阶段"}},[t._v("挂载阶段")])]),a("li",[a("a",{attrs:{href:"#更新阶段"}},[t._v("更新阶段")])]),a("li",[a("a",{attrs:{href:"#卸载阶段"}},[t._v("卸载阶段")])]),a("li",[a("a",{attrs:{href:"#getderivedstatefromprops-nextprops-prevstate"}},[t._v("getDerivedStateFromProps(nextProps, prevState)")])]),a("li",[a("a",{attrs:{href:"#componentdidcatch-err-info"}},[t._v("componentDidCatch(err,info)")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"挂载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载阶段"}},[t._v("#")]),t._v(" 挂载阶段")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n在组件挂载之前调用，且全局只调用一次\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n在组件挂载完成后调用，且全局只调用一次。\n可以在这里使用refs，获取真实dom元素\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("li2345678"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("code"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h2",{attrs:{id:"更新阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("react组件更新机制\nsetState引起的state更新或父组件重新render引起的props更新\n更新后的state和props相对之前无论是否有变化，都将引起子组件的重新render\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillReceiveProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props发生变化以及父组件重新渲染时都会触发该生命周期函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n在该钩子内可以通过参数nextProps获取变化后的props参数\n通过"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props访问之前的props。该生命周期内可以进行setState\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nextState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  （优化性能"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n组件挂载之后，每次调用setState后都会调用shouldComponentUpdate判断是否需要重新渲染组件。\n就是通过比较nextProps，nextState及当前组件的"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props，"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state的状态用来判断是否需要重新渲染\n默认返回"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，需要重新render，返回"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("则不触发渲染\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nextState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("不能在该钩子中setState，否则会触发重复循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n组件即将被更新时触发\n\nshouldComponentUpdate返回"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("或者调用forceUpdate之后，componentWillUpdate会被调用\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setState可能会触发重复渲染"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("需自行判断，否则会进入死循环"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n此方法在组件更新后被调用\n除了首次render之后调用componentDidMount，其它render结束之后都是调用componentDidUpdate\n可以操作组件更新的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("，prevProps和prevState这两个参数指的是组件更新前的props和state\n\n")])])]),a("h2",{attrs:{id:"卸载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载阶段"}},[t._v("#")]),t._v(" 卸载阶段")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("此方法在组件被卸载前调用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n清除组件中使用的定时器、取消Redux的订阅事件、清除componentDidMount中手动创建的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("元素等等，以避免引起内存泄漏\n")])])]),a("h2",{attrs:{id:"getderivedstatefromprops-nextprops-prevstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getderivedstatefromprops-nextprops-prevstate"}},[t._v("#")]),t._v(" getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("这个方法在 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("之后，componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 之前调用。\n该方法传入的两个参数：prevProps表示更新前的 props，prevState表示更新前的 state\n返回值称为一个快照（snapshot），如果不需要 snapshot，\n则必须显示的返回 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" —— 因为返回值将作为 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 的第三个参数使用。\n所以这个函数必须要配合 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 一起使用。\n\n")])])]),a("h2",{attrs:{id:"componentdidcatch-err-info"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidcatch-err-info"}},[t._v("#")]),t._v(" componentDidCatch(err,info)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("任何子组件在渲染期间，生命周期方法中或者构造函数 constructor 发生错误时调用。\n两个参数：err表示抛出的错误，info表示带有componentStack key的对象，其中包含有关组件引发错误的栈信息。\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);